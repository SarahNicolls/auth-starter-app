AUTHENTICATION SETUP

1. Install required packages
    Packages
      -jsonwebtoken
      -hapi-auth-jwt2
      -bcrypt-as-promised

2. Add 'hapi-auth-jwt2' to our index, and use as a plugin in server.register

3. Modify 'api' plugin(api.js), and add auth scheme setup. Set default auth method

4. Add 'auth.mode' as 'optional' to each route config that we want public

5. Modify user model to include methods to:
  Methods:
      - generatePassword()
        -method should generate a salt, then hash,
        then update the user with the hash value as the password field value

6. Modify user model to execute 'generatePassword()' before saving a new user

7. Improve our signup/create user endpoint by first filtering by email to see 
if any other users already have used that email, throw an error message if it's in use

8. Modify user moder to include methods to:
    Methods:
      -comparePassword(password)
      - method should compare password passed in as the parameter
      to the password stored on the user with the bcrypt.compare method

      - if the result (result equals whether they are authenticated or not)
      of the compare is false, then return false
      -otherwise, return the authenticated user

9. Modify login endpoints to:
    -filter through users to find the user with the login email
    -if there is a user, compare the login password by calling 
    user.comparePassword(password)
    - else if no user was found, throw an error message: 'email and password
    combination do not match'
    -if result of compare was successful, return the authenticated user, else
    throw an error saying: 'email and passworkd combo do not match'

10. Modify user model to include methods to:
    Methods: 
      -generateJWT(user)
        -method will create a json web token using the 'jsonwebtoken' 
        package method 'jwt.sign(data, secretKey, optionsObject)'

11. Improve login to generate a JSON web token before seing the 
authenticated user back to the HTTP response
